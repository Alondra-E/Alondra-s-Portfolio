# -*- coding: utf-8 -*-
"""Additional days of operation impact

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UQK7OGtE7B51CNdHQrDXPrCCHPPkYVyE

# Total Gross sales in September 1st to November 17th in years (2022, 2023, 2024)
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the dataset
data = pd.read_excel('vb_sales (1).xlsx')

# Parse the date and extract the day of the week and year
data['Date'] = pd.to_datetime(data['Date'])
data['DayOfWeek'] = data['Date'].dt.day_name()
data['Year'] = data['Date'].dt.year

# Define time periods
last_year_period = (data['Date'] >= '2023-09-01') & (data['Date'] <= '2023-11-17')
current_year_period_after_sep = (data['Date'] >= '2024-09-02') & (data['Date'] <= '2024-11-17')
year_2022_period = (data['Date'] >= '2022-09-01') & (data['Date'] <= '2022-11-17')

# Calculate total gross sales for each period
total_sales = {
    "2022 Sep 1 - Nov 17": data[year_2022_period]['Gross Sales'].sum(),
    "2023 Sep 1 - Nov 17": data[last_year_period]['Gross Sales'].sum(),
    "2024 Sep 1 - Nov 17": data[current_year_period_after_sep]['Gross Sales'].sum()
}

# Convert to a DataFrame for better readability
total_sales_df = pd.DataFrame.from_dict(total_sales, orient='index', columns=['Total Gross Sales'])

# Define different green shades for each bar
green_shades = ['forestgreen', 'darkgreen', 'darkolivegreen']

# Plotting the bar chart with different green shades
plt.figure(figsize=(10, 6))

# Plot each bar with a unique green shade
for i, (label, value) in enumerate(total_sales.items()):
    plt.bar(label, value, color=green_shades[i], edgecolor='black', label=label)
    # Add the value on top of each bar
    plt.text(label, value + max(total_sales.values()) * 0.01, f"{value:,.0f}",
             ha='center', va='bottom', fontsize=10, color='black')

# Adding titles and labels
plt.title('Total Gross Sales by Time Period', fontsize=14)
plt.ylabel('Total Gross Sales', fontsize=12)
plt.xlabel('Time Period', fontsize=12)
plt.xticks(rotation=45, fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Display the bar chart
plt.tight_layout()
plt.show()

"""# Compare the performance trends of each day across the three years"""

import pandas as pd
import matplotlib.pyplot as plt

# Filter data for each year and relevant date ranges
data_2022 = data[(data['Date'] >= '2022-09-01') & (data['Date'] <= '2022-11-17')]
data_2023 = data[(data['Date'] >= '2023-09-01') & (data['Date'] <= '2023-11-17')]
data_2024 = data[(data['Date'] >= '2024-09-01') & (data['Date'] <= '2024-11-17')]

# Calculate total gross sales for each day of the week
total_sales_2022 = data_2022.groupby('DayOfWeek')['Gross Sales'].sum().reindex(
    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
)
total_sales_2023 = data_2023.groupby('DayOfWeek')['Gross Sales'].sum().reindex(
    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
)
total_sales_2024 = data_2024.groupby('DayOfWeek')['Gross Sales'].sum().reindex(
    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
)

# Plot the line graph for total sales
plt.figure(figsize=(12, 8))

# Define green shades
line_colors = ['forestgreen', 'darkgreen', 'darkolivegreen']

# Plot each year's total sales with a distinct green shade
plt.plot(total_sales_2022.index, total_sales_2022, marker='o', linestyle='-', color=line_colors[0], label='2022 Sep 1 - Nov 17')
plt.plot(total_sales_2023.index, total_sales_2023, marker='o', linestyle='--', color=line_colors[1], label='2023 Sep 1 - Nov 17')
plt.plot(total_sales_2024.index, total_sales_2024, marker='o', linestyle=':', color=line_colors[2], label='2024 Sep 1 - Nov 17')

# Adding titles and labels
plt.title('Total Gross Sales by Day of the Week (2022-2024)', fontsize=14)
plt.xlabel('Day of the Week', fontsize=12)
plt.ylabel('Total Gross Sales', fontsize=12)
plt.grid(True)
plt.legend(fontsize=10)
plt.xticks(rotation=45, fontsize=10)

# Display the graph
plt.tight_layout()
plt.show()

"""# Distribution of sales in a week"""

import pandas as pd
import matplotlib.pyplot as plt

# Calculate total weekly sales for each day of the week across the specified date ranges
total_sales_week_2022 = data[(data['Date'] >= '2022-09-01') & (data['Date'] <= '2022-11-17')].groupby('DayOfWeek')['Gross Sales'].sum().reindex(
    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
)
total_sales_week_2023 = data[(data['Date'] >= '2023-09-01') & (data['Date'] <= '2023-11-17')].groupby('DayOfWeek')['Gross Sales'].sum().reindex(
    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
)
total_sales_week_2024 = data[(data['Date'] >= '2024-09-01') & (data['Date'] <= '2024-11-17')].groupby('DayOfWeek')['Gross Sales'].sum().reindex(
    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
)

# Calculate proportions of total weekly sales for stacked visualization
proportions_2022 = total_sales_week_2022 / total_sales_week_2022.sum()
proportions_2023 = total_sales_week_2023 / total_sales_week_2023.sum()
proportions_2024 = total_sales_week_2024 / total_sales_week_2024.sum()

# Combine proportions into a DataFrame for easier visualization
proportions_df = pd.DataFrame({
    '2022': proportions_2022,
    '2023': proportions_2023,
    '2024': proportions_2024
})

# Plotting the distribution of sales as stacked bar charts
proportions_df.T.plot(kind='bar', stacked=True, figsize=(12, 8), colormap='Greens', edgecolor='black')

# Adding titles and labels
plt.title('Distribution of Weekly Sales by Day (2022-2024)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Proportion of Total Weekly Sales', fontsize=12)
plt.legend(title='Day of the Week', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=10)
plt.xticks(rotation=0)
plt.tight_layout()

# Display the stacked bar chart
plt.show()

"""# Revenue Distribution"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Calculate total revenue for each day of the week for the specified date ranges
five_day_revenue = data[(data['Date'] >= '2022-09-01') & (data['Date'] <= '2023-11-17')].groupby('DayOfWeek')['Gross Sales'].sum().reindex(
    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
)
seven_day_revenue = data[(data['Date'] >= '2024-09-01') & (data['Date'] <= '2024-11-17')].groupby('DayOfWeek')['Gross Sales'].sum().reindex(
    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
)

# Labels for pie charts
labels_5day = five_day_revenue.index
labels_7day = seven_day_revenue.index

# Plotting the pie charts
fig, axes = plt.subplots(1, 2, figsize=(16, 8))

# 5-Day Model Pie Chart
axes[0].pie(five_day_revenue, labels=labels_5day, autopct='%1.1f%%', startangle=140, colors=plt.cm.Greens(np.linspace(0.3, 0.8, len(labels_5day))))
axes[0].set_title('Revenue Distribution: 2022-2023 (5-Day)', fontsize=14)

# 7-Day Model Pie Chart
axes[1].pie(seven_day_revenue, labels=labels_7day, autopct='%1.1f%%', startangle=140, colors=plt.cm.Greens(np.linspace(0.3, 0.8, len(labels_7day))))
axes[1].set_title('Revenue Distribution: 2024 (7-Day)', fontsize=14)

plt.tight_layout()
plt.show()